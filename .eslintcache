[{"C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\index.js":"1","C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\reportWebVitals.js":"2","C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\App.js":"3","C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\Movie.js":"4"},{"size":197,"mtime":1608186304543,"results":"5","hashOfConfig":"6"},{"size":362,"mtime":499162500000,"results":"7","hashOfConfig":"8"},{"size":1842,"mtime":1613550247886,"results":"9","hashOfConfig":"6"},{"size":1136,"mtime":1613547143070,"results":"10","hashOfConfig":"6"},{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"pkl6e",{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10zmqcs",{"filePath":"16","messages":"17","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"13"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},"C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\index.js",[],["22","23"],"C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\reportWebVitals.js",[],"C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\App.js",["24","25","26"],"import React from \"react\";\nimport propTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport { render } from \"@testing-library/react\";\nimport \"./Movie.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  componentDidMount() {\n    this.getMovies();\n  }\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\n    ); //axios로 영화 정보를 가져옵니다. (느림)\n    //평점 순으로 data를 정렬합니다.\n    //awiat => axios가 끝날 때 까지 기다렸다가 작업을 계속합니다. (async를 반드시 사용해야합니다.\n    this.setState({ movies, isLoading: false }); //state의 이름과 받아오는 데이터의 객체 이름인 movies가 같기 때문에 줄여쓸 수 있습니다.\n    console.log(movies);\n  };\n\n  renderMovies = () => {\n    const { movies } = this.state;\n\n    return movies.map((movie) => (\n      <Movie\n        key={movie.id}\n        id={movie.id}\n        year={movie.year}\n        title={movie.title}\n        summary={movie.summary}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n      />\n    ));\n  };\n\n  render() {\n    const { isLoading, movies } = this.state;\n    const number = Math.floor(Math.random() * 100);\n\n    console.log(typeof movies);\n\n    return (\n      <div>\n        {isLoading ? (\n          <div className=\"loader\">\n            <p className=\"loader_text\">Please wait🌻</p>\n          </div>\n        ) : (\n          <div className=\"movies\">{this.renderMovies()}</div>\n        )}\n      </div> //JSX내부에는 꼭 className이라고 정확히 명시해줍니다. js의 class와 혼동할 수 있음.\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\vlyly\\Documents\\Javascript\\react\\movie_app\\src\\Movie.js",["27"],"import react from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img className=\"movie_poster\" src={poster} alt={title} title={title} />\r\n      <div className=\"movie_data\">\r\n        <h3 className=\"movie_title\">{title}</h3>\r\n        <strong className=\"movie_year\">{year}</strong>\r\n        <ul className=\"movie_genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres_genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie_summary\">\r\n          {/* {summary.length > 180 ? summary.slice(0, 180) + \"...\" : summary} */}\r\n          {summary.slice(0, 180)}...\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: propTypes.number.isRequired,\r\n  year: propTypes.number.isRequired,\r\n  title: propTypes.string.isRequired,\r\n  summary: propTypes.string.isRequired,\r\n  poster: propTypes.string.isRequired,\r\n  genres: propTypes.arrayOf(propTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n",{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","severity":1,"message":"33","line":2,"column":8,"nodeType":"34","messageId":"35","endLine":2,"endColumn":17},{"ruleId":"32","severity":1,"message":"36","line":5,"column":10,"nodeType":"34","messageId":"35","endLine":5,"endColumn":16},{"ruleId":"32","severity":1,"message":"37","line":50,"column":11,"nodeType":"34","messageId":"35","endLine":50,"endColumn":17},{"ruleId":"32","severity":1,"message":"38","line":1,"column":8,"nodeType":"34","messageId":"35","endLine":1,"endColumn":13},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'propTypes' is defined but never used.","Identifier","unusedVar","'render' is defined but never used.","'number' is assigned a value but never used.","'react' is defined but never used.","no-global-assign","no-unsafe-negation"]