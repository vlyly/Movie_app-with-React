{"version":3,"sources":["Movie.js","App.js","index.js"],"names":["Movie","year","title","summary","poster","genres","className","src","alt","map","genre","index","slice","App","state","isLoading","movies","getMovies","a","axios","get","data","setState","console","log","renderMovies","movie","id","medium_cover_image","this","Math","floor","random","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kPAoCeA,MAhCf,YAA0D,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,QAASC,EAAkB,EAAlBA,OAAQC,EAAU,EAAVA,OAC7C,OACE,sBAAKC,UAAU,QAAf,UACE,qBAAKA,UAAU,eAAeC,IAAKH,EAAQI,IAAKN,EAAOA,MAAOA,IAC9D,sBAAKI,UAAU,aAAf,UACE,oBAAIA,UAAU,cAAd,SAA6BJ,IAC7B,wBAAQI,UAAU,aAAlB,SAAgCL,IAChC,oBAAIK,UAAU,eAAd,SACGD,EAAOI,KAAI,SAACC,EAAOC,GAAR,OACV,oBAAgBL,UAAU,eAA1B,SACGI,GADMC,QAKb,oBAAGL,UAAU,gBAAb,UAEGH,EAAQS,MAAM,EAAG,KAFpB,gBCwEOC,G,mNAlFbC,MAAQ,CACNC,WAAW,EACXC,OAAQ,I,EASVC,U,sBAAY,8BAAAC,EAAA,sEAKAC,IAAMC,IACd,yEANQ,gBAGEJ,EAHF,EAERK,KACEA,KAAQL,OAOZ,EAAKM,SAAS,CAAEN,SAAQD,WAAW,IACnCQ,QAAQC,IAAIR,GAXF,2C,EAcZS,aAAe,WAGb,OAFmB,EAAKX,MAAhBE,OAEMP,KAAI,SAACiB,GAAD,OAChB,cAAC,EAAD,CAEEC,GAAID,EAAMC,GACV1B,KAAMyB,EAAMzB,KACZC,MAAOwB,EAAMxB,MACbC,QAASuB,EAAMvB,QACfC,OAAQsB,EAAME,mBACdvB,OAAQqB,EAAMrB,QANTqB,EAAMC,Q,kEAxBfE,KAAKZ,YAELM,QAAQC,IAAI,0B,+BAkCJ,IAAD,EACuBK,KAAKf,MAA3BC,EADD,EACCA,UAAWC,EADZ,EACYA,OACJc,KAAKC,MAAsB,IAAhBD,KAAKE,UAI/B,OAFAT,QAAQC,WAAWR,GAGjB,8BAmBE,qBAAKV,UAAU,SAAf,SACGS,EACC,qBAAKT,UAAU,SAAf,SACE,mBAAGA,UAAU,cAAb,6BAGFuB,KAAKJ,uB,GA3ECQ,IAAMC,YCHxBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.127bf21b.chunk.js","sourcesContent":["import react from \"react\";\r\nimport propTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\n\r\nfunction Movie({ year, title, summary, poster, genres }) {\r\n  return (\r\n    <div className=\"movie\">\r\n      <img className=\"movie_poster\" src={poster} alt={title} title={title} />\r\n      <div className=\"movie_data\">\r\n        <h3 className=\"movie_title\">{title}</h3>\r\n        <strong className=\"movie_year\">{year}</strong>\r\n        <ul className=\"movie_genres\">\r\n          {genres.map((genre, index) => (\r\n            <li key={index} className=\"genres_genre\">\r\n              {genre}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <p className=\"movie_summary\">\r\n          {/* {summary.length > 180 ? summary.slice(0, 180) + \"...\" : summary} */}\r\n          {summary.slice(0, 180)}...\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nMovie.propTypes = {\r\n  id: propTypes.number.isRequired,\r\n  year: propTypes.number.isRequired,\r\n  title: propTypes.string.isRequired,\r\n  summary: propTypes.string.isRequired,\r\n  poster: propTypes.string.isRequired,\r\n  genres: propTypes.arrayOf(propTypes.string).isRequired,\r\n};\r\n\r\nexport default Movie;\r\n","import React from \"react\";\nimport propTypes from \"prop-types\";\nimport axios from \"axios\";\nimport Movie from \"./Movie\";\nimport { render } from \"@testing-library/react\";\nimport \"./Movie.css\";\n\nclass App extends React.Component {\n  state = {\n    isLoading: true,\n    movies: [],\n  };\n\n  componentDidMount() {\n    this.getMovies();\n    // this.renderMovies();\n    console.log(\"Movie Data is loaded\");\n  }\n\n  getMovies = async () => {\n    const {\n      data: {\n        data: { movies },\n      },\n    } = await axios.get(\n      \"https://yts-proxy.nomadcoders1.now.sh/list_movies.json?sort_by=rating\"\n    ); //axios로 영화 정보를 가져옵니다. (느림)\n    //평점 순으로 data를 정렬합니다.\n    //awiat => axios가 끝날 때 까지 기다렸다가 작업을 계속합니다. (async를 반드시 사용해야합니다.\n    this.setState({ movies, isLoading: false }); //state의 이름과 받아오는 데이터의 객체 이름인 movies가 같기 때문에 줄여쓸 수 있습니다.\n    console.log(movies);\n  };\n\n  renderMovies = () => {\n    const { movies } = this.state;\n\n    return movies.map((movie) => (\n      <Movie\n        key={movie.id}\n        id={movie.id}\n        year={movie.year}\n        title={movie.title}\n        summary={movie.summary}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n      />\n    ));\n    console.log(\"Movies are renderd.\");\n  };\n\n  render() {\n    const { isLoading, movies } = this.state;\n    const number = Math.floor(Math.random() * 100);\n\n    console.log(typeof movies);\n\n    return (\n      <div>\n        {/* <h1>number : {number}</h1>\n        <h3>\n          {number % 2 === 0 ? \"number is even number!\" : \"number is odd number\"}\n        </h3> */}\n        {/* <div>\n          {isLoading\n            ? \"I'm comming:) Please wait\"\n            : movies.map((movie) => (\n                <Movie\n                  key={movie.id}\n                  id={movie.id}\n                  year={movie.year}\n                  title={movie.title}\n                  summary={movie.summary}\n                  poster={movie.medium_cover_image}\n                />\n              ))}\n        </div> */}\n        <div className=\"movies\">\n          {isLoading ? (\n            <div className=\"loader\">\n              <p className=\"loader_text\">Please wait:)</p>\n            </div>\n          ) : (\n            this.renderMovies()\n          )}\n        </div>\n      </div> //JSX내부에는 꼭 className이라고 정확히 명시해줍니다. js의 class와 혼동할 수 있음.\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}